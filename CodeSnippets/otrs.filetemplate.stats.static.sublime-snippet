<snippet>
	<content><![CDATA[
# --
# Kernel/System/Stats/Static/$1.pm - $2
# Copyright (C) 2014 Znuny GmbH, http://znuny.com/
# --

package Kernel::System::Stats::Static::$1;

use strict;
use warnings;

sub new {
    my ( \$Type, %Param ) = @_;

    # allocate new hash for object
    my \$Self = {};
    bless( \$Self, \$Type );

    # check needed objects
    for my \$Needed (qw(ConfigObject LogObject DBObject MainObject TimeObject EncodeObject)) {
        \$Self->{\$Needed} = \$Param{\$Needed} || die "Got no \$Needed!";
    }

    return \$Self;
}

sub GetObjectBehaviours {
    my ( \$Self, %Param ) = @_;

    my %Behaviours = (
        ProvidesDashboardWidget => 1,
    );

    return %Behaviours;
}

sub Param {
    my \$Self = shift;

    # get current time
    my ( \$Secons, \$Minute, \$Hour, \$Day, \$Month, \$Year ) = \$Self->{TimeObject}->SystemTime2Date(
        SystemTime => \$Self->{TimeObject}->SystemTime(),
    );

    # get one month before
    my \$SelectedYearEnd  = \$Month == 1 ? \$Year - 1 : \$Year;
    my \$SelectedMonth    = \$Month == 1 ? 12        : \$Month - 1;

    # create possible time selections
    my %Year  = map { \$_ => \$_ } ( \$Year - 10 .. \$Year );
    my %Month = map { \$_ => sprintf( "%02d", \$_ ) } ( 1 .. 12 );

    my @Params;

    # SINGLE MONTH
    push @Params, {
        Frontend   => 'Year',
        Name       => 'Year',
        Multiple   => 0,
        Size       => 0,
        SelectedID => \$SelectedYear,
        Data       => \%Year,
    };
    push @Params, {
        Frontend   => 'Month',
        Name       => 'Month',
        Multiple   => 0,
        Size       => 0,
        SelectedID => \$SelectedMonth,
        Data       => \%Month,
    );

    # OR START-/ENDDATE
    push @Params, {
        Frontend   => 'Year Start',
        Name       => 'YearStart',
        Multiple   => 0,
        Size       => 0,
        SelectedID => \$SelectedYearEnd - 1,
        Data       => \%Year,
    };
    push @Params, {
        Frontend   => 'Month Start',
        Name       => 'MonthStart',
        Multiple   => 0,
        Size       => 0,
        SelectedID => \$SelectedMonth,
        Data       => \%Month,
    };
    push @Params, {
        Frontend   => 'Year End',
        Name       => 'YearEnd',
        Multiple   => 0,
        Size       => 0,
        SelectedID => \$SelectedYearEnd,
        Data       => \%Year,
    };
    push @Params, {
        Frontend   => 'Month End',
        Name       => 'MonthEnd',
        Multiple   => 0,
        Size       => 0,
        SelectedID => \$SelectedMonth,
        Data       => \%Month,
    };


    return @Params;
}

sub Run {
    my ( \$Self, %Param ) = @_;

    # SINGLE MONTH
    my \$Year  = \$Param{Year};
    my \$Month = \$Param{Month};

    # OR START-/ENDDATE
    my \$SystemTimeStart = \$Self->{TimeObject}->SystemTime2TimeStamp(
        SystemTime => \$Self->{TimeObject}->Date2SystemTime(
                        Year   => \$Param{YearStart},
                        Month  => \$Param{MonthStart},
                        Day    => 1,
                        Hour   => 0,
                        Minute => 0,
                        Second => 0,
                    )
    );

    my \$LastDay = \$Self->LastDay(
        Year  => \$Param{YearEnd},
        Month => \$Param{MonthEnd},
    );

    my \$SystemTimeEnd = \$Self->{TimeObject}->SystemTime2TimeStamp(
        SystemTime => \$Self->{TimeObject}->Date2SystemTime(
                        Year   => \$Param{YearEnd},
                        Month  => \$Param{MonthEnd},
                        Day    => \$LastDay,
                        Hour   => 23,
                        Minute => 59,
                        Second => 59,
                    ),
    );



    return (
        ['This is the title row'],
        ['this', 'is', 'the', 'first', 'row'],
        ['this', 'is', 'the', 'second', 'row'],
    );
}

sub LastDay {
    my ( \$Self, %Param ) = @_;

    # arguments are assumed to be in "human" terms
    \$Param{Month}--, \$Param{Year} -= 1900;  # perl-ify them

    my (\$NextMonth, \$NextYear) = (\$Param{Month} == 11) ? (0, \$Param{Year} + 1) : (\$Param{Month} + 1, \$Param{Year});

    # the first of next month, minus one day
    my \$LastDaySystemTime = timelocal(0, 0, 12, 1, \$NextMonth, \$NextYear) - 86400;

    my ( \$Secons, \$Minute, \$Hour, \$Day, \$Month, \$Year ) = \$Self->{TimeObject}->SystemTime2Date(
        SystemTime => \$LastDaySystemTime,
    );

    return \$Day;
}

1;

]]></content>
	<tabTrigger>otrs.filetemplate.stats.static</tabTrigger>
</snippet>
